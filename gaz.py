# -*- coding: utf-8 -*-
"""gaz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IociWJIt2NIxAfqq87l2vJiLYA2aXP6Z
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pandas_profiling
import cufflinks as cf
import plotly.offline
import datetime
# %matplotlib inline
import numpy as np
from statsmodels.tsa.filters.hp_filter import hpfilter
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.linear_model import LinearRegression
#P трубы давление трубы в мега паскалях 
#Tyct температура устнановки
# конденсат
#вода  которая выходит с газом 
# куст группа скважин
# id скважина 
gaz = pd.read_csv('https://raw.githubusercontent.com/qwerty29544/RpracticeBook/master/2Data/01FlatTables/GAZ.csv',  delimiter = '\t', decimal='.', encoding='UTF-8', parse_dates=['дата замера', 'Ртр МПа', 'Туст °С', 'газ м3/сут', 'конд-т м3/сут','вода м3/сут', 'ID', 'Куст', 'Группа'])

gaz

gaz.isna().sum()

gaz.columns = [
    u'Дата', u'Р МПа', u't', u'Газ м3/сут', u'конденсат', u'вода м3/сут', 
    u'ID', u'Куст', u'Группа']

gaz['Группа'].unique()



counts = gaz['Куст'].value_counts()
counts

gaz.dtypes

my_kyct = ['КП 16','КП 12','КП 19','КП 14']
my_df = pd.DataFrame()
for i in my_kyct:
  kyct_df = gaz[gaz['Куст'] == i]
  my_df = pd.concat([my_df, kyct_df]) 
my_df

num_col = my_df.drop(['Дата','Куст','Группа', 'ID'], axis = 1).columns

my_df



def new_date_time(my_time):
  space = []
  for i in range(1,len(my_time)):
    space.append(my_time[i] - my_time[i - 1])
  return (np.array(space))

def datetime_to_day(gaz):
  num_day = []
  for i in range(gaz.shape[0]):
      num_day.append((gaz['Дата'].iloc[i] - gaz['Дата'].iloc[0]).days)
  gaz['day'] = num_day
  gaz.set_index('day', inplace=True)
  gaz.sort_index(inplace=True)
  return gaz



for i in num_col:
  my_df[i] = my_df[i].astype(str)
  a = []
  for j in my_df[i]:
    a.append(j.replace(',', '.'))
  my_df[i] = a
  my_df[i] = my_df[i].astype(float)
my_df.dtypes

my_df.describe()

my_df['Куст'].value_counts()

id_unique =  my_df['ID'].unique()

kyct_unique = my_df['Куст'].unique()
kyct_unique

my_df['Группа'].unique()
my_df_1023 = my_df[my_df['ID'] == '1023']
my_df_1023

for i in id_unique:
  my_df_id = my_df[my_df['ID'] == i]
  fig, ax = plt.subplots(figsize = (12,5))
  ax.plot(my_df_id['Газ м3/сут'])
  ax.set_title(f'Объем газа выкаченного с 2016 по 2019 с id {i} ' + f'количесвто измерений {my_df_id.shape[0]}')
  ax.autoscale(axis='both',tight=True)
  ax.set(xlabel='Дата', ylabel='Объем')

for i in id_unique:
  my_df_id = my_df[my_df['ID'] == i]
  my_df_id = datetime_to_day(my_df_id)
  my_df_id['cycle'], my_df_id['trend'] = hpfilter(my_df_id['Газ м3/сут'], lamb=43200)
  fig, ax = plt.subplots(figsize = (12,5))
  ax.plot(my_df_id[['Газ м3/сут','trend']])
  ax.set_title(f'Объем газа выкаченного с 2016 по 2019 с id {i} ' + f'количесвто измерений {my_df_id.shape[0]}')
  ax.autoscale(axis='both',tight=True)
  ax.set(xlabel='Дата', ylabel='Объем')

(new_date_time(datetime_to_day(my_df_1023).index)).mean()

for i in num_col:
  my_df[i].fillna(my_df[i].mean(), inplace = True)

my_df['ID'].value_counts()

my_df_1012 = datetime_to_day(my_df[my_df['ID'] == '1012'])
interval = round(new_date_time(my_df_1012['day'].values).mean())
my_df_1012['day_interval'] = [interval*i for i in range(570)]
my_df_1012.set_index('day_interval', inplace=True)

my_df_1023